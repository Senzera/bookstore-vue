{"ast":null,"code":"import { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      valid: true,\n      name: '',\n      nameRules: [v => !!v || 'Name is required', v => v && v.length <= 255 || 'Name must be less than 255 characters'],\n      showPassword: false,\n      password: '',\n      passwordRules: [v => !!v || 'Password is required', v => v && v.length >= 6 || 'Min 6 characters'],\n      email: '',\n      emailRules: [v => !!v || 'E-mail is required', v => /([a-zA-Z0-9_]{1,})(@)([a-zA-Z0-9_]{2,}).([a-zA-Z0-9_]{2,})+/.test(v) || 'E-mail must be valid'],\n      checkbox: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      user: 'auth/user'\n    })\n  },\n  methods: {\n    ...mapActions({\n      setAlert: 'alert/set',\n      setStatusDialog: 'dialog/setStatus',\n      setAuth: 'auth/set'\n    }),\n    close() {\n      this.setStatusDialog(false);\n    },\n    submit() {\n      if (this.$refs.form.validate()) {\n        let formData = new FormData();\n        formData.set('name', this.name);\n        formData.set('email', this.email);\n        formData.set('password', this.password);\n        this.axios.post('/register', formData).then(response => {\n          let data_user = response.data.data;\n          this.setAuth(data_user);\n          this.setAlert({\n            status: true,\n            text: 'Register success',\n            type: 'success'\n          });\n          this.close();\n        }).catch(error => {\n          let response = error.response;\n          this.setAlert({\n            status: true,\n            text: response.data.message,\n            type: 'error'\n          });\n        });\n      }\n    },\n    clear() {\n      this.$refs.form.reset();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","name","data","valid","nameRules","v","length","showPassword","password","passwordRules","email","emailRules","test","checkbox","computed","user","methods","setAlert","setStatusDialog","setAuth","close","submit","$refs","form","validate","formData","FormData","set","axios","post","then","response","data_user","status","text","type","catch","error","message","clear","reset"],"sources":["src/views/Register.vue"],"sourcesContent":["import\r\n<template>\r\n    <v-card>\r\n      <v-toolbar dark color=\"primary\">\r\n        <v-btn icon dark @click.native=\"close\">\r\n          <v-icon>close</v-icon>\r\n        </v-btn>\r\n        <v-toolbar-title>Register</v-toolbar-title>\r\n      </v-toolbar>\r\n      <v-divider></v-divider>\r\n      <v-container fluid>\r\n        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\r\n          <v-text-field v-model=\"name\" :rules=\"nameRules\" :counter=\"255\" label=\"Name\" required append-icon=\"person\"></v-text-field>\r\n          <v-text-field v-model=\"email\" :rules=\"emailRules\" label=\"E-mail\" required append-icon=\"email\"></v-text-field>\r\n          <v-text-field v-model=\"password\" :append-icon=\"showPassword ? 'visibility' : 'visibility_off'\" :rules=\"passwordRules\"\r\n            :type=\"showPassword ? 'text' : 'password'\" label=\"Password\" hint=\"At least 6 characters\" counter @click:append=\"showPassword = !showPassword\">\r\n          </v-text-field>\r\n          <v-checkbox v-model=\"checkbox\" :rules=\"[v => !!v || 'You must agree to continue!']\" label=\"Do you agree with our Privacy Policy?\" required></v-checkbox>\r\n          <div class=\"text-xs-center\">\r\n            <v-btn color=\"primary\" :disabled=\"!valid\" @click=\"submit\">Submit</v-btn>\r\n            <v-btn @click=\"clear\">Clear</v-btn>\r\n          </div>\r\n        </v-form>\r\n      </v-container>\r\n    </v-card>\r\n  </template>\r\n  \r\n  <script>\r\n  import { mapGetters, mapActions } from 'vuex';\r\n  \r\n  export default {\r\n    name: 'RegisterPage',\r\n    data() {\r\n      return {\r\n        valid: true,\r\n        name: '',\r\n        nameRules: [\r\n          v => !!v || 'Name is required',\r\n          v => (v && v.length <= 255) || 'Name must be less than 255 characters'\r\n        ],\r\n        showPassword: false,\r\n        password: '',\r\n        passwordRules: [\r\n          v => !!v || 'Password is required',\r\n          v => (v && v.length >= 6) || 'Min 6 characters',\r\n        ],\r\n        email: '',\r\n        emailRules: [\r\n          v => !!v || 'E-mail is required',\r\n          v => /([a-zA-Z0-9_]{1,})(@)([a-zA-Z0-9_]{2,}).([a-zA-Z0-9_]{2,})+/.test(v) || 'E-mail must be valid'\r\n        ],\r\n        checkbox: false\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters({\r\n        user: 'auth/user',\r\n      }),\r\n    },\r\n    methods: {\r\n      ...mapActions({\r\n        setAlert: 'alert/set',\r\n        setStatusDialog: 'dialog/setStatus',\r\n        setAuth: 'auth/set',\r\n      }),\r\n      close() {\r\n        this.setStatusDialog(false);\r\n      },\r\n      submit() {\r\n        if (this.$refs.form.validate()) {\r\n          let formData = new FormData();\r\n          formData.set('name', this.name);\r\n          formData.set('email', this.email);\r\n          formData.set('password', this.password);\r\n          this.axios\r\n            .post('/register', formData)\r\n            .then((response) => {\r\n              let data_user = response.data.data;\r\n              this.setAuth(data_user);\r\n              this.setAlert({\r\n                status: true,\r\n                text: 'Register success',\r\n                type: 'success',\r\n              });\r\n              this.close();\r\n            })\r\n            .catch((error) => {\r\n              let response = error.response;\r\n              this.setAlert({\r\n                status: true,\r\n                text: response.data.message,\r\n                type: 'error',\r\n              });\r\n            });\r\n        }\r\n      },\r\n      clear() {\r\n        this.$refs.form.reset();\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .text-xs-center {\r\n    margin-top: 16px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AA4BA,SAAAA,UAAA,EAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAF,IAAA;MACAG,SAAA,GACAC,CAAA,MAAAA,CAAA,wBACAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,CAAAC,MAAA,mDACA;MACAC,YAAA;MACAC,QAAA;MACAC,aAAA,GACAJ,CAAA,MAAAA,CAAA,4BACAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,CAAAC,MAAA,4BACA;MACAI,KAAA;MACAC,UAAA,GACAN,CAAA,MAAAA,CAAA,0BACAA,CAAA,kEAAAO,IAAA,CAAAP,CAAA,4BACA;MACAQ,QAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAf,UAAA;MACAgB,IAAA;IACA;EACA;EACAC,OAAA;IACA,GAAAhB,UAAA;MACAiB,QAAA;MACAC,eAAA;MACAC,OAAA;IACA;IACAC,MAAA;MACA,KAAAF,eAAA;IACA;IACAG,OAAA;MACA,SAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA;QACA,IAAAC,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,GAAA,cAAA1B,IAAA;QACAwB,QAAA,CAAAE,GAAA,eAAAjB,KAAA;QACAe,QAAA,CAAAE,GAAA,kBAAAnB,QAAA;QACA,KAAAoB,KAAA,CACAC,IAAA,cAAAJ,QAAA,EACAK,IAAA,CAAAC,QAAA;UACA,IAAAC,SAAA,GAAAD,QAAA,CAAA7B,IAAA,CAAAA,IAAA;UACA,KAAAiB,OAAA,CAAAa,SAAA;UACA,KAAAf,QAAA;YACAgB,MAAA;YACAC,IAAA;YACAC,IAAA;UACA;UACA,KAAAf,KAAA;QACA,GACAgB,KAAA,CAAAC,KAAA;UACA,IAAAN,QAAA,GAAAM,KAAA,CAAAN,QAAA;UACA,KAAAd,QAAA;YACAgB,MAAA;YACAC,IAAA,EAAAH,QAAA,CAAA7B,IAAA,CAAAoC,OAAA;YACAH,IAAA;UACA;QACA;MACA;IACA;IACAI,MAAA;MACA,KAAAjB,KAAA,CAAAC,IAAA,CAAAiB,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}